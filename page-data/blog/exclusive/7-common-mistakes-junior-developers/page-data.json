{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/exclusive/7-common-mistakes-junior-developers/","result":{"data":{"site":{"siteMetadata":{"title":"Code Your Future | Preston Wallace | Dev Rocket"}},"markdownRemark":{"id":"9fc18b25-bf7b-5ac2-95c2-a7265ba8d27d","excerpt":"As a junior developer, you're bound to make mistakes. But don't worry, we've got your back. Here are 7 common mistakes that junior developers make and how toâ€¦","html":"<p>As a junior developer, you're bound to make mistakes. But don't worry, we've got your back. Here are 7 common mistakes that junior developers make and how to avoid them.</p>\n<h2>1. Not Using Version Control</h2>\n<p>Version control is your best friend. It helps you keep track of your code changes, collaborate with your team, and revert to previous versions if needed. Don't be the developer who doesn't use version control.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Initialize a Git repository in your project folder</span>\n<span class=\"token function\">git</span> init\n\n<span class=\"token comment\"># Add all files to the staging area</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># Commit your changes with a meaningful message</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit\"</span>\n</code></pre></div>\n<h2>2. Ignoring Error Messages</h2>\n<p>Error messages may seem like the bane of your existence, but they're actually your friend. They tell you what's wrong with your code and how to fix it. Don't ignore them!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Don't ignore error messages!</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myVar <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myVar is undefined!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>3. Overcomplicating Code</h2>\n<p>Simplicity is key. Don't try to reinvent the wheel or write overly complex code. Keep it simple and clean.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Instead of this...</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> myArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> myArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...do this</span>\nmyArray<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>4. Not Testing Code</h2>\n<p>Testing your code is essential. It helps you catch bugs early and ensures that your code works as expected. Don't skip testing!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Use a testing framework like Jest</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addition works correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>5. Hardcoding Values</h2>\n<p>Hardcoding values may work in the short term, but it's not scalable or maintainable. Use variables or constants instead.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Instead of this...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateTax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> price <span class=\"token operator\">*</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...do this</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAX_RATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateTax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> price <span class=\"token operator\">*</span> <span class=\"token constant\">TAX_RATE</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>6. Not Using Comments</h2>\n<p>Comments are your friend. They help you and your team understand what your code does and why. Don't be afraid to use them!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Use comments to explain what your code does</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width<span class=\"token punctuation\">,</span> height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Calculate the area by multiplying width and height</span>\n  <span class=\"token keyword\">const</span> area <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> area<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>7. Copying and Pasting Code</h2>\n<p>Copying and pasting code may seem like a quick solution, but it's not a good habit to have. It can lead to errors and make your code harder to maintain. Write your own code!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Instead of copying and pasting code...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">+=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...write your own code</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>That's it for today! Avoid these 7 common mistakes and you will be well on your way to becoming a great developer. Stay tuned for more tips and tricks to level up your skills!</p>\n<p>We hope you found this lesson helpful and engaging. Remember, as a junior developer, you are bound to make mistakes, but it's important to learn from them and keep improving. Keep coding, keep learning, and keep growing!</p>","frontmatter":{"title":"7 Common Mistakes Junior Developers Make","date":null,"description":"...and How to Avoid Them","featuredImage":null,"type":"exclusive","youTubeVideo":"https://www.youtube.com/embed/3bqohVu_zmw?&controls=0"}},"previous":{"fields":{"slug":"/blog/exclusive/ultimate-terminal-cheatsheet/"},"frontmatter":{"title":"The Ultimate Terminal Cheatsheet - Your Key to Command Line Productivity"}},"next":{"fields":{"slug":"/blog/exclusive/why-restful-apis-holding-back-graphql/"},"frontmatter":{"title":"Why RESTful APIs are Holding You Back"}}},"pageContext":{"id":"9fc18b25-bf7b-5ac2-95c2-a7265ba8d27d","previousPostId":"1ca8932c-e563-5613-8a46-0f3cc6f2a23d","nextPostId":"2ca110ea-4bc5-5210-8a7e-f96cd14633bb"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}