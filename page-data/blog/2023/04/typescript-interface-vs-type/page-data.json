{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2023/04/typescript-interface-vs-type/","result":{"data":{"site":{"siteMetadata":{"title":"Code Your Future | Preston Wallace | Dev Rocket"}},"markdownRemark":{"id":"d8f99d5f-c11e-5240-9692-d571a3b96163","excerpt":"When we cook, we use recipes.  In recipes, we use ingredients.  Recipes contain collections of different ingredients. In TypeScript, interfaces and types serveâ€¦","html":"<p>When we cook, we use recipes.  In recipes, we use ingredients.  Recipes contain collections of different ingredients.</p>\n<p>In TypeScript, interfaces and types serve as \"recipes\" for your data. Interfaces define the specific requirements for each piece of data, like how many ingredients are needed and how they should be combined. Types, on the other hand, define the specific data types, like whether an ingredient is a liquid or a solid.</p>\n<p>Interfaces are used to describe the shape of data and specify the syntax that each entity must follow. Types, on the other hand, define data types, such as primitive, intersection, union, tuple, or different types. Below is an example of a <code class=\"language-text\">Recipe</code> that is a union type of two different interfaces, <code class=\"language-text\">Success</code> and <code class=\"language-text\">Failure</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> Success <span class=\"token operator\">|</span> Failure<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Success</span> <span class=\"token punctuation\">{</span>\n  success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Failure</span> <span class=\"token punctuation\">{</span>\n  success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">Result</code> type can either be a <code class=\"language-text\">Success</code> or a <code class=\"language-text\">Failure</code>. The <code class=\"language-text\">Success</code> and <code class=\"language-text\">Failure</code> interfaces define the shape of the <code class=\"language-text\">Result</code> type, with <code class=\"language-text\">Success</code> having a <code class=\"language-text\">success</code> property that is always <code class=\"language-text\">true</code> and a <code class=\"language-text\">message</code> property, and <code class=\"language-text\">Failure</code> having a <code class=\"language-text\">success</code> property that is always <code class=\"language-text\">false</code> and an <code class=\"language-text\">error</code> property.</p>\n<h2 id=\"interfaces\" style=\"position:relative;\"><a href=\"#interfaces\" aria-label=\"interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interfaces</h2>\n<p>In TypeScript, an interface is a way to define a contract that an object must conform to. It specifies the syntax that each entity must follow, without providing any implementation details. An interface describes the shape of data and is useful for creating reusable code.</p>\n<p>An entity that is described by an interface must conform to the syntax requirements specified by the interface. For example, consider the following interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">speak</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sound<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This interface describes an <code class=\"language-text\">Animal</code> object that must have a <code class=\"language-text\">name</code> property that is a string, an <code class=\"language-text\">age</code> property that is a number, and a <code class=\"language-text\">speak</code> method that takes a <code class=\"language-text\">sound</code> parameter and returns nothing. Any object that implements this interface must have these properties and methods.</p>\n<h3 id=\"merging-of-interfaces\" style=\"position:relative;\"><a href=\"#merging-of-interfaces\" aria-label=\"merging of interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Merging of interfaces</h3>\n<p>Interfaces in TypeScript can be merged when two interfaces have the same name. This is useful for breaking down large interfaces into smaller, more manageable pieces. For example, consider the following interfaces:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These two interfaces have the same name and will be merged into a single interface that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"extending-interfaces-with-types\" style=\"position:relative;\"><a href=\"#extending-interfaces-with-types\" aria-label=\"extending interfaces with types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending interfaces with types</h3>\n<p>In TypeScript, it is possible to extend an interface with a type. This allows you to add additional properties to an interface that are defined by a type. For example, consider the following interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Employee</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  salary<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> Person<span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, we define a <code class=\"language-text\">Person</code> interface with a <code class=\"language-text\">name</code> property. We also define an <code class=\"language-text\">Employee</code> type that has additional properties for <code class=\"language-text\">id</code> and <code class=\"language-text\">salary</code>. We use the <code class=\"language-text\">&amp;</code> operator to combine the <code class=\"language-text\">Employee</code> type with the <code class=\"language-text\">Person</code> interface to create a new interface that has all of the properties from both. This allows us to create an object that is both a <code class=\"language-text\">Person</code> and an <code class=\"language-text\">Employee</code>.</p>\n<h2 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h2>\n<h3 id=\"definition-and-purpose-of-types\" style=\"position:relative;\"><a href=\"#definition-and-purpose-of-types\" aria-label=\"definition and purpose of types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definition and purpose of types</h3>\n<p>In TypeScript, a type is a way to define a set of data types that a value can have. It is used to ensure that variables, parameters, and return values have the correct data types. Types are useful for catching errors early in the development process.</p>\n<h3 id=\"types-of-data-that-can-be-defined-with-types\" style=\"position:relative;\"><a href=\"#types-of-data-that-can-be-defined-with-types\" aria-label=\"types of data that can be defined with types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types of data that can be defined with types</h3>\n<p>In TypeScript, there are several types of data that can be defined with types, such as:</p>\n<ul>\n<li>Primitive types: <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code>, <code class=\"language-text\">symbol</code>, and <code class=\"language-text\">bigint</code>.</li>\n<li>Intersection types: a type that is a combination of two or more types, written with the <code class=\"language-text\">&amp;</code> operator.</li>\n<li>Union types: a type that can be one of several types, written with the <code class=\"language-text\">|</code> operator.</li>\n<li>Tuple types: a type that represents an array with a fixed number of elements and each element having its own data type.</li>\n<li>Function types: a type that represents a function, including its parameters and return type.</li>\n<li>Class types: a type that represents a class, including its properties and methods.</li>\n</ul>\n<h3 id=\"error-that-occurs-when-defining-two-types-with-the-same-name\" style=\"position:relative;\"><a href=\"#error-that-occurs-when-defining-two-types-with-the-same-name\" aria-label=\"error that occurs when defining two types with the same name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error that occurs when defining two types with the same name</h3>\n<p>Using the <code class=\"language-text\">type</code> keyword to define two different types with the same name will result in an error. For example, consider the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This code will result in the following error:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">\nDuplicate identifier <span class=\"token string\">'Person'</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<h3 id=\"intersection-types\" style=\"position:relative;\"><a href=\"#intersection-types\" aria-label=\"intersection types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersection types</h3>\n<p>Intersection types are a way to combine multiple types into a single type. This can be useful for creating reusable code. For example, consider the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> person<span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, we define two types <code class=\"language-text\">A</code> and <code class=\"language-text\">B</code>. We then use the <code class=\"language-text\">&amp;</code> operator to create a new type <code class=\"language-text\">C</code> that is an intersection of <code class=\"language-text\">A</code> and <code class=\"language-text\">B</code>. We can then use <code class=\"language-text\">C</code> to create an object that has both a <code class=\"language-text\">name</code> property of type <code class=\"language-text\">string</code> and an <code class=\"language-text\">age</code> property of type <code class=\"language-text\">number</code>.</p>\n<h3 id=\"union-types\" style=\"position:relative;\"><a href=\"#union-types\" aria-label=\"union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union types</h3>\n<p>Union types are a way to define a type that can be one of several types. For example, consider the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> Success <span class=\"token operator\">|</span> Failure<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Success</span> <span class=\"token punctuation\">{</span>\n  success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Failure</span> <span class=\"token punctuation\">{</span>\n  success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleResult</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">:</span> Result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, we define a <code class=\"language-text\">Result</code> type that can either be a <code class=\"language-text\">Success</code> or a <code class=\"language-text\">Failure</code>. We use this type as a parameter for the <code class=\"language-text\">handleResult</code> function, which takes a <code class=\"language-text\">Result</code> object and checks if it is a <code class=\"language-text\">Success</code> or a <code class=\"language-text\">Failure</code>. Depending on the type of the object, it logs either the <code class=\"language-text\">message</code> property or the <code class=\"language-text\">error</code> property to the console.</p>\n<h2 id=\"tuple-types\" style=\"position:relative;\"><a href=\"#tuple-types\" aria-label=\"tuple types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuple types</h2>\n<p>Tuple types are a way to define an array with a fixed number of elements and each element having its own data type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> person<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this will throw an error: Type 'string' is not assignable to type 'number'.</span>\n<span class=\"token keyword\">const</span> person<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'30'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"differences-between-interfaces-and-types\" style=\"position:relative;\"><a href=\"#differences-between-interfaces-and-types\" aria-label=\"differences between interfaces and types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Differences between Interfaces and Types</h2>\n<h3 id=\"summary-of-the-main-differences-between-interfaces-and-types\" style=\"position:relative;\"><a href=\"#summary-of-the-main-differences-between-interfaces-and-types\" aria-label=\"summary of the main differences between interfaces and types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary of the main differences between interfaces and types</h3>\n<p>In TypeScript, interfaces and types are often used interchangeably, but they have different purposes and syntax requirements. Here are some of the main differences between interfaces and types:</p>\n<ul>\n<li>Interfaces are used to describe the shape of data and specify the syntax that each entity must follow, whereas types define data types.</li>\n<li>Interfaces can merge when two interfaces have the same name, but using the same name for two different types with the <code class=\"language-text\">type</code> keyword will result in an error.</li>\n<li>Interfaces can be extended with types, but type aliases cannot extend a class.</li>\n<li>Intersection types can be created with the <code class=\"language-text\">&amp;</code> operator using types, but not interfaces.</li>\n<li>Union types can be created with the <code class=\"language-text\">|</code> operator using both interfaces and types.</li>\n</ul>\n<p>When deciding whether to use an interface or a type, it is important to consider the specific needs of the code being written. For example, if you are defining the structure of an object, an interface may be more appropriate because it is more focused on defining the shape of the data. On the other hand, if you need to define a specific data type or create a type that is a combination of multiple types, a type may be more appropriate.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<h3 id=\"recap-of-the-important-points-discussed-in-the-article\" style=\"position:relative;\"><a href=\"#recap-of-the-important-points-discussed-in-the-article\" aria-label=\"recap of the important points discussed in the article permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap of the important points discussed in the article</h3>\n<p>In this article, we discussed the differences between interfaces and types in TypeScript. We explored the purpose and syntax requirements of interfaces, including their ability to merge and be extended with types. We also discussed the types of data that can be defined with types, such as intersection and union types, and the error that occurs when defining two types with the same name.</p>\n<h3 id=\"final-thoughts-on-when-to-use-interfaces-and-types-in-typescript-programming\" style=\"position:relative;\"><a href=\"#final-thoughts-on-when-to-use-interfaces-and-types-in-typescript-programming\" aria-label=\"final thoughts on when to use interfaces and types in typescript programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final thoughts on when to use interfaces and types in TypeScript programming</h3>\n<p>When deciding whether to use an interface or a type in TypeScript programming, it is important to consider the specific needs of the code being written. Both interfaces and types have their strengths and weaknesses, and there is no one-size-fits-all solution.</p>\n<p>Interfaces are useful for defining the shape of data, specifying the syntax that each entity must follow, and merging with other interfaces. Types, on the other hand, are better suited for defining specific data types and creating a type that is a combination of multiple types.</p>\n<p>Ultimately, the decision to use an interface or a type will depend on the specific requirements of the project and the preference of the developer. By understanding the differences between interfaces and types, TypeScript programmers can make informed decisions about which approach to use in their code.</p>","frontmatter":{"title":"Interfaces vs Types in TypeScript: What's the diff?","date":"April 24, 2023","description":"Recipes for Well-Defined Data in TypeScript","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8c8","images":{"fallback":{"src":"/static/bf19099b09bbe2b94284c80fd90b5c2b/fc2d4/header.jpg","srcSet":"/static/bf19099b09bbe2b94284c80fd90b5c2b/b834a/header.jpg 225w,\n/static/bf19099b09bbe2b94284c80fd90b5c2b/21c52/header.jpg 450w,\n/static/bf19099b09bbe2b94284c80fd90b5c2b/fc2d4/header.jpg 900w,\n/static/bf19099b09bbe2b94284c80fd90b5c2b/1221a/header.jpg 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/bf19099b09bbe2b94284c80fd90b5c2b/71a10/header.webp 225w,\n/static/bf19099b09bbe2b94284c80fd90b5c2b/901f1/header.webp 450w,\n/static/bf19099b09bbe2b94284c80fd90b5c2b/4ffff/header.webp 900w,\n/static/bf19099b09bbe2b94284c80fd90b5c2b/66516/header.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":600}}},"type":null,"youTubeVideo":"https://youtu.be/wQ-CWKhnCJc","repository":"https://github.com/DevRocketCode/interfaces-vs-types/blob/main/src/app.ts"}},"previous":{"fields":{"slug":"/blog/2023/04/typescript-interfaces/"},"frontmatter":{"title":"Harnessing the Power of TypeScript Interfaces - A Guide for Developers"}},"next":{"fields":{"slug":"/blog/exclusive/why-restful-apis-holding-back-graphql/"},"frontmatter":{"title":"Why RESTful APIs are Holding You Back"}}},"pageContext":{"id":"d8f99d5f-c11e-5240-9692-d571a3b96163","previousPostId":"ce7f07a4-fd7d-540c-bd6b-452dfb98774a","nextPostId":"2ca110ea-4bc5-5210-8a7e-f96cd14633bb"}},"staticQueryHashes":["2841359383","2944715102"],"slicesMap":{}}