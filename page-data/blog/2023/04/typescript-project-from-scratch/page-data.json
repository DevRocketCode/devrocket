{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2023/04/typescript-project-from-scratch/","result":{"data":{"site":{"siteMetadata":{"title":"Code Your Future | Preston Wallace | Dev Rocket"}},"markdownRemark":{"id":"29746079-0ade-515d-8b4d-3d2a5a8cbbca","excerpt":"Introduction If you're like many JavaScript developers, you want to write in TypeScript. It sounds great, but how do you use it in the real world? In this…","html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>If you're like many JavaScript developers, you want to write in TypeScript. It sounds great, but how do you use it in the real world? In this tutorial, we'll build a TypeScript project from scratch, using Node.js, Express, and TypeScript.</p>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>You should be able to follow this tutorial if you have a basic understanding of Node.js and TypeScript. If you're new to TypeScript, get my free guide: <a href=\"/typescript-essentials-free-guide\">TypeScript Essentials: 5 Critical Keys to Using TypeScript Effectively</a></p>\n<h2 id=\"outline\" style=\"position:relative;\"><a href=\"#outline\" aria-label=\"outline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outline</h2>\n<p>Here's an overview of the steps we'll take in this tutorial:</p>\n<ul>\n<li>Setup &#x26; Config\n<ul>\n<li><a href=\"#install-typescript\">Install TypeScript</a></li>\n<li><a href=\"#clone-the-project\">Clone the project</a></li>\n<li><a href=\"#install-dependencies\">Install Dependencies</a></li>\n<li><a href=\"#create-a-tsconfig-file\">Create a tsconfig.json file</a></li>\n</ul>\n</li>\n<li>Create the Server\n<ul>\n<li><a href=\"#create-a-new-typescript-server-file\">Create a new TypeScript server file</a></li>\n<li><a href=\"#add-the-start-scripts\">Add the Start Scripts</a></li>\n<li><a href=\"#write-the-server-code\">Write the Server Code</a></li>\n<li><a href=\"#install-type-definitions\">Install Type Definitions</a></li>\n<li><a href=\"#watch-the-code\">Watch the Code</a></li>\n<li><a href=\"#send-back-recipes\">Send Back Recipes</a></li>\n</ul>\n</li>\n<li>Add Routes (more benefits of TypeScript)\n<ul>\n<li><a href=\"#add-a-db-module\">Add a DB Module</a></li>\n<li><a href=\"#add-a-new-route-by-id\">Add a new route by id</a></li>\n<li><a href=\"#add-a-recipe\">Add a Recipe</a></li>\n<li><a href=\"#create-an-interface\">Create an Interface</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"install-typescript\" style=\"position:relative;\"><a href=\"#install-typescript\" aria-label=\"install typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install TypeScript</h2>\n<p>To install TypeScript, you can use npm, the Node.js package manager, by following these steps:</p>\n<p>Open your terminal or command prompt.</p>\n<p>Run the following command to install TypeScript globally:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> typescript</code></pre></div>\n<p>This will install the latest stable version of TypeScript on your machine.</p>\n<p>To check if TypeScript is installed correctly, you can run the following command in your terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tsc <span class=\"token parameter variable\">--version</span></code></pre></div>\n<p>This should print the version of TypeScript installed on your machine.</p>\n<p>Now you're ready to use TypeScript in your Node.js project.</p>\n<h2 id=\"clone-the-project\" style=\"position:relative;\"><a href=\"#clone-the-project\" aria-label=\"clone the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clone the Project</h2>\n<p>For this tutorial, we'll be using the project, <a href=\"https://github.com/DevRocketCode/pantry-pal.git\">Pantry Pal</a>, as a starting point. I recommend to fork it and clone it instead of cloning it directly.  Note: the project already has the npm project initialized, so you can skip that step.</p>\n<blockquote>\n<p>⚠️ There is a <strong><a href=\"https://github.com/DevRocketCode/pantry-pal/tree/solution\">solution branch</a></strong> in the project that you can use to compare your code to the finished project.</p>\n</blockquote>\n<h2 id=\"install-dependencies\" style=\"position:relative;\"><a href=\"#install-dependencies\" aria-label=\"install dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install Dependencies</h2>\n<p>We'll need to install the required dependencies for TypeScript. Run this in your terminal, at the root of your project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> typescript ts-node @types/node --save-dev</code></pre></div>\n<h2 id=\"create-a-tsconfig-file\" style=\"position:relative;\"><a href=\"#create-a-tsconfig-file\" aria-label=\"create a tsconfig file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a tsconfig file</h2>\n<p>Create a tsconfig.json file to configure TypeScript. You can do this manually or by running the following command in your terminal.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tsc <span class=\"token parameter variable\">--init</span></code></pre></div>\n<p>This generates a file with a few configs plus a lot of comments. Feel free to edit the comments until you have just the configs:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2016\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"create-a-new-typescript-server-file\" style=\"position:relative;\"><a href=\"#create-a-new-typescript-server-file\" aria-label=\"create a new typescript server file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a new TypeScript server file</h2>\n<p>We'll create a new TypeScript server file in our project directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> app.ts</code></pre></div>\n<h2 id=\"add-the-start-scripts\" style=\"position:relative;\"><a href=\"#add-the-start-scripts\" aria-label=\"add the start scripts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add the Start Scripts</h2>\n<p>Now we'll update our package.json file to include a script to run our TypeScript code. Add the following under the <code class=\"language-text\">scripts</code> property in your package.json file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node app.ts\"</span></code></pre></div>\n<p>This is the command we'll use when developing our project. It will run our TypeScript code using ts-node.</p>\n<p>Also, we'll add another script to build a production version of our project. Add the following under the <code class=\"language-text\">scripts</code> property in your package.json file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span></code></pre></div>\n<h2 id=\"write-the-server-code\" style=\"position:relative;\"><a href=\"#write-the-server-code\" aria-label=\"write the server code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Write the Server Code</h2>\n<p>Finally, the fun part!  We get to write the code for our server.</p>\n<p>First, let's install Express</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express</code></pre></div>\n<p>Next, open the app.ts file and add the first line to import express.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"install-type-definitions\" style=\"position:relative;\"><a href=\"#install-type-definitions\" aria-label=\"install type definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install Type Definitions</h2>\n<p>When we write just this first line, TypeScript is already mad at us!  It gives us an error like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Cannot <span class=\"token function\">find</span> module <span class=\"token string\">'express'</span> or its corresponding <span class=\"token builtin class-name\">type</span> declarations.</code></pre></div>\n<p>This is because we haven't installed the type definitions for Express.  We can fix this by installing the @types/express package.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/express</code></pre></div>\n<p>Now, TypeScript is happy, yay!  But, what exactly happened, here?  The @types/express package is a type definition file.  It's a file that tells TypeScript what types to expect from the express package.  It's not a package that we need to import into our code.  It's just a file that TypeScript uses to help it understand the types of the express package.  And now we can write our server code.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Import express</span>\n<span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a new express app instance</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make the PORT configurable</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Start the Express server, displaying the localhost URL</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is great, but there aren't any routes for our server 😱.  Let's add a route to serve up some recipes.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ... express initialization above</span>\n\n<span class=\"token comment\">// GET /recipes</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/recipes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Recipes to come'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we should see these words when we request the route on our server at <a href=\"http://localhost:3000/recipes\">http://localhost:3000/recipes</a></p>\n<h2 id=\"watch-the-code\" style=\"position:relative;\"><a href=\"#watch-the-code\" aria-label=\"watch the code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Watch the Code</h2>\n<p>You'll notice that when making changes, nothing happens. The server isn't restarting, nor is typescript recompiling our code. We can fix this by updating our <code class=\"language-text\">start</code> script in our package.json file. Before we do so, though, let's move our <code class=\"language-text\">app.ts</code> and <code class=\"language-text\">recipes.json</code> files into a <code class=\"language-text\">src</code> folder. This will help keep our project organized.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> src\n<span class=\"token function\">mv</span> app.ts src\n<span class=\"token function\">mv</span> recipes.json src</code></pre></div>\n<p>Now our project should look like this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">├── README.md\n├── package-lock.json\n├── package.json\n├── src\n│   ├── app.ts\n│   └── recipes.json\n└── tsconfig.json</code></pre></div>\n<p>Now, we can update our <code class=\"language-text\">start</code> script:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon --watch 'src/**' --ext 'ts,json' --ignore 'src/**/*.spec.ts' --exec 'ts-node src/app.ts'\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>This script will watch our <code class=\"language-text\">src</code> folder for changes to any <code class=\"language-text\">.ts</code> or <code class=\"language-text\">.json</code> files.  It will ignore any <code class=\"language-text\">.spec.ts</code> files.  It will run <code class=\"language-text\">ts-node</code> on our <code class=\"language-text\">app.ts</code> file.  However, we'll now need to install <code class=\"language-text\">nodemon</code> to watch our files.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> nodemon</code></pre></div>\n<p>Finally, we can run our <code class=\"language-text\">start</code> script to watch our files and run our server.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> start</code></pre></div>\n<p>Now we should see the response from our server when we request the root of our server at <a href=\"http://localhost:3000/recipes\">http://localhost:3000/recipes</a>.</p>\n<h2 id=\"send-back-recipes\" style=\"position:relative;\"><a href=\"#send-back-recipes\" aria-label=\"send back recipes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Send Back Recipes</h2>\n<p>Instead of boring boilerplate code, let's add some recipes to our server.  We'll use the pre-existing recipes.json file in the root of our project.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Import the recipes</span>\n<span class=\"token keyword\">import</span> recipes <span class=\"token keyword\">from</span> <span class=\"token string\">'./recipes.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... express initialization and other stuff</span>\n\n<span class=\"token comment\">// GET /recipes</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/recipes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>recipes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When we do this, we get an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Cannot <span class=\"token function\">find</span> module <span class=\"token string\">'./recipes.json'</span><span class=\"token builtin class-name\">.</span> Consider using <span class=\"token string\">'--resolveJsonModule'</span> to <span class=\"token function\">import</span> module with <span class=\"token string\">'.json'</span> extension.</code></pre></div>\n<p>Typescript basically is saying \"I don't know what to do with this file.  It's not a JavaScript file, and it's not a TypeScript file.  What do you want from me?\"  We can fix this by adding the <code class=\"language-text\">resolveJsonModule</code> flag to our <code class=\"language-text\">tsconfig.json</code> file. Then, TypeScript will know how to handle JSON files.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>Now, our import works, and we are sending back recipes. Visit the API, and you'll see the recipes, in all their glory!</p>\n<p>Great! We've created a simple API using TypeScript and Express.  But... you might be wondering why TypeScript looks so much like JavaScript.  What's the point?  Well, let's add a new route to our server, and see how TypeScript can help us.</p>\n<h2 id=\"add-a-db-module\" style=\"position:relative;\"><a href=\"#add-a-db-module\" aria-label=\"add a db module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add a DB module</h2>\n<p>In the next step, we'll add a new route, but first, let's create a lightweight in-memory \"database\".</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> src/db.ts</code></pre></div>\n<p>In this file, we'll create a mock db that basically mimics some functions that we might use to interact with a real database.  We'll export a few functions that we can use to add and get recipes.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> recipes <span class=\"token keyword\">from</span> <span class=\"token string\">'./recipes.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> recipes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getByIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> recipes<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You'll notice that the new function throws an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Parameter <span class=\"token string\">'idx'</span> implicitly has an <span class=\"token string\">'any'</span> type.</code></pre></div>\n<p>This is because TypeScript doesn't know what type <code class=\"language-text\">idx</code> is.  We can fix this by adding a type annotation to the function parameter. What type do we expect? A number, to access the object in the array via index. So, we can add a type annotation to the parameter. Also, let's add a return type annotation to the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getByIndex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>idx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> recipes<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"add-a-new-route-by-id\" style=\"position:relative;\"><a href=\"#add-a-new-route-by-id\" aria-label=\"add a new route by id permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add a new route by id</h2>\n<p>Now, we can use this function in our server code.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Import the db module</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> db <span class=\"token keyword\">from</span> <span class=\"token string\">'./db'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ... express initialization and other stuff</span>\n\n<span class=\"token comment\">// GET /recipes/:idx</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/recipes/:idx'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> recipe <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">getByIndex</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But, oops! Now we get an error in our route handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Argument of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'string'</span> is not assignable to parameter of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'number'</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>This is because <code class=\"language-text\">req.params.idx</code> is a string, but we're passing it to a function that expects a number.  We can fix this by casting the string to a number.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, before we start cursing TypeScript for all these errors, lets take a step back and think about what's going on.  We're using TypeScript to help us catch errors before we run our code.  This is a good thing!  It's much easier to catch errors in our code before we run it, than to find them after we've deployed our code to production.  So, rejoice in TypeScript, and fix your errors! 😄</p>\n<p>Now, we can request a recipe by index at <a href=\"http://localhost:3000/recipes/1\">http://localhost:3000/recipes/1</a>.</p>\n<h2 id=\"add-a-recipe\" style=\"position:relative;\"><a href=\"#add-a-recipe\" aria-label=\"add a recipe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add a Recipe</h2>\n<p>Let's add a new route to add a recipe to our database.  We'll use the <code class=\"language-text\">POST</code> method to add a new recipe.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// POST /recipes</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/recipes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> recipe <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  db<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, we'll also need an <code class=\"language-text\">add</code> function in our db module.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  recipes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But we run into the same error here:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Parameter <span class=\"token string\">'recipe'</span> implicitly has an <span class=\"token string\">'any'</span> type.</code></pre></div>\n<p>Ok, we know that we need to give it a type, but what type do we give for an object like the recipes?  This is where we'll need to create an interface!</p>\n<h2 id=\"create-an-interface\" style=\"position:relative;\"><a href=\"#create-an-interface\" aria-label=\"create an interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create an interface</h2>\n<p>An interface is a TypeScript construct that allows us to define the shape of an object.  We can use interfaces to define the shape of our recipes, and then use them in our code. In this case, we want to define the shape of a recipe, so we'll call it <code class=\"language-text\">Recipe</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Recipe</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  ingredients<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, we can use this interface in our db module.  This way, when we call <code class=\"language-text\">add</code>, TypeScript knows what we'll be passing in.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>recipe<span class=\"token operator\">:</span> Recipe<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  recipes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, we can use our <code class=\"language-text\">db.add</code> function in our route handler.  Don't forget to configure Express to parse JSON.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Configure Express to parse JSON</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// POST /recipes</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/recipes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> recipe <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  db<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can add recipes to our server.  We can test this out by using <code class=\"language-text\">curl</code> to send a POST request to our server.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"name\": \"Pancakes\", \"description\": \"Delicious pancakes\", \"ingredients\": [\"flour\", \"eggs\", \"milk\"]}'</span> http://localhost:3000/recipes</code></pre></div>\n<p>And to confirm, we can visit <a href=\"http://localhost:3000/recipes/5\">http://localhost:3000/recipes/5</a> to see our new recipe!</p>\n<p>And that's it! We've created an API using TypeScript and Express.  We've also learned a bit about TypeScript, and how it can help us catch errors before we run our code.  We've also learned about interfaces, which allow us to define the shape of an object.  We can use interfaces to define the shape of our data, and then use them in our code.</p>","frontmatter":{"title":"Build an Express server in TypeScript, from scratch","date":"May 01, 2023","description":"Learn how to build a server from scratch, using Node.js, Express, and TypeScript.","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8b8a8","images":{"fallback":{"src":"/static/5b6b0e0c91e096f8d791d9e2e229e8bd/fc2d4/header.jpg","srcSet":"/static/5b6b0e0c91e096f8d791d9e2e229e8bd/b834a/header.jpg 225w,\n/static/5b6b0e0c91e096f8d791d9e2e229e8bd/21c52/header.jpg 450w,\n/static/5b6b0e0c91e096f8d791d9e2e229e8bd/fc2d4/header.jpg 900w,\n/static/5b6b0e0c91e096f8d791d9e2e229e8bd/1221a/header.jpg 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/5b6b0e0c91e096f8d791d9e2e229e8bd/71a10/header.webp 225w,\n/static/5b6b0e0c91e096f8d791d9e2e229e8bd/901f1/header.webp 450w,\n/static/5b6b0e0c91e096f8d791d9e2e229e8bd/4ffff/header.webp 900w,\n/static/5b6b0e0c91e096f8d791d9e2e229e8bd/66516/header.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":600}}},"type":null,"youTubeVideo":null,"repository":null}},"previous":{"fields":{"slug":"/blog/2023/04/typescript-interface-vs-type/"},"frontmatter":{"title":"Interfaces vs Types in TypeScript: What's the diff?"}},"next":{"fields":{"slug":"/blog/exclusive/7-common-mistakes-junior-developers/"},"frontmatter":{"title":"7 Common Mistakes Junior Developers Make"}}},"pageContext":{"id":"29746079-0ade-515d-8b4d-3d2a5a8cbbca","previousPostId":"d8f99d5f-c11e-5240-9692-d571a3b96163","nextPostId":"9fc18b25-bf7b-5ac2-95c2-a7265ba8d27d"}},"staticQueryHashes":["2841359383","2944715102"],"slicesMap":{}}