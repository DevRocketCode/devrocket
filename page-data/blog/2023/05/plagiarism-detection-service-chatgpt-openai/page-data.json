{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2023/05/plagiarism-detection-service-chatgpt-openai/","result":{"data":{"site":{"siteMetadata":{"title":"Code Your Future | Preston Wallace | Dev Rocket"}},"markdownRemark":{"id":"8ccac348-db98-5e6c-98ca-366638494533","excerpt":"The Conference I gave this talk at the TypeScript Global Summit '23, on May 10 2023, and it was a blast!  I had a great time and met a lot of awesome people.  Iâ€¦","html":"<h2 id=\"the-conference\" style=\"position:relative;\"><a href=\"#the-conference\" aria-label=\"the conference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Conference</h2>\n<p>I gave this talk at the <a href=\"https://events.geekle.us/typescript/\">TypeScript Global Summit '23</a>, on May 10 2023, and it was a blast!  I had a great time and met a lot of awesome people.  I'm looking forward to the next one!  In this talk, I cover how to build a plagiarism detection service using TypeScript and the ChatGPT API from OpenAI.</p>\n<p>Detecting plagiarism in written works is an important task, and there are many tools available to help with this. However, building your own plagiarism detection service using natural language processing can be a fun and educational experience. In this talk, we will explore how to build a \"works well enough\" plagiarism detection service using TypeScript and the OpenAI API.</p>\n<h2 id=\"what-well-cover\" style=\"position:relative;\"><a href=\"#what-well-cover\" aria-label=\"what well cover permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What we'll cover</h2>\n<p>First, we'll introduce the OpenAI API and its capabilities. We'll see how to call the API from an Express server, using TypeScript to define types and interfaces. We'll also look at how to handle the API's response and format it for display in a React front-end.</p>\n<h3 id=\"openai-api-and-chatgpt\" style=\"position:relative;\"><a href=\"#openai-api-and-chatgpt\" aria-label=\"openai api and chatgpt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OpenAI API and ChatGPT</h3>\n<p>We'll clarify that the OpenAI API is not called the \"ChatGPT API\", although ChatGPT is one of the many products that OpenAI offers. ChatGPT is a natural language processing model that can be used to build chatbots, while the OpenAI API encompasses a broader range of models, including Dall-E and GitHub CoPilot. However, we'll be focusing on ChatGPT models in this talk, since they're well-known and useful for our specific use case.</p>\n<h3 id=\"what-were-not-building\" style=\"position:relative;\"><a href=\"#what-were-not-building\" aria-label=\"what were not building permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What we're not building</h3>\n<p>It's important to clarify what we won't be building. We won't be building a true plagiarism detector, since that would require a large database of existing works and a model trained specifically to detect plagiarism. We also won't be building a chatbot, since that's a popular use case for ChatGPT models and many tutorials already exist for it. Instead, we'll focus on building a service that works well enough for our purposes, and that demonstrates how to use the OpenAI API and TypeScript.</p>\n<h3 id=\"what-we-are-building\" style=\"position:relative;\"><a href=\"#what-we-are-building\" aria-label=\"what we are building permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What we are building</h3>\n<p>We'll dive into our main topic: building a plagiarism detection service. We'll outline the steps involved, including gathering input from the client, wrapping it in a context prompt, calling the OpenAI API, formatting the response on the server side, and displaying it in a helpful view. We'll emphasize that we're using TypeScript, React, and Express to build the service.</p>\n<h3 id=\"point-of-the-demo\" style=\"position:relative;\"><a href=\"#point-of-the-demo\" aria-label=\"point of the demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Point of the Demo</h3>\n<p>By the end of this tutorial, you'll have a better understanding of how to use the OpenAI API and TypeScript to build a plagiarism detection service. You'll also have a sense of the strengths and limitations of such a service, and you'll have gained some experience working with natural language processing models. Let's dive in and get our hands dirty with the OpenAI API!</p>\n<h2 id=\"project-setup\" style=\"position:relative;\"><a href=\"#project-setup\" aria-label=\"project setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Setup</h2>\n<h3 id=\"the-repo\" style=\"position:relative;\"><a href=\"#the-repo\" aria-label=\"the repo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Repo</h3>\n<ul>\n<li>Clone <a href=\"https://github.com/DevRocketCode/plagiarism-detection-service\">the starter repo</a> for this tutorial</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/DevRocketCode/plagiarism-detection-service</code></pre></div>\n<ul>\n<li>CD into the directory</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd plagiarism-detection-service</code></pre></div>\n<ul>\n<li>Run the install command</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install</code></pre></div>\n<h3 id=\"openai-account\" style=\"position:relative;\"><a href=\"#openai-account\" aria-label=\"openai account permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OpenAI Account</h3>\n<ul>\n<li>Go to <a href=\"https://platform.openai.com/\">platform.openai.com</a> and log in or sign up for a free account</li>\n<li>Go to <a href=\"https://platform.openai.com/account/api-keys\">View API Keys</a> of the Account section, create a new secret key, and copy your API key</li>\n</ul>\n<h3 id=\"add-your-api-key\" style=\"position:relative;\"><a href=\"#add-your-api-key\" aria-label=\"add your api key permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add your API Key</h3>\n<ul>\n<li>In the projct locally, create a new file named <code class=\"language-text\">.env</code> (including the dot) in the root directory, and add your OpenAI API key to it.  Its contents should look like this:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">OPENAI_API_KEY=sk-&lt;your-api-key></code></pre></div>\n<h3 id=\"run-the-project\" style=\"position:relative;\"><a href=\"#run-the-project\" aria-label=\"run the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run the project</h3>\n<ul>\n<li>Run <code class=\"language-text\">npm run start-client</code> to start the client</li>\n<li>Run <code class=\"language-text\">npm run start-server</code> to start the server</li>\n<li>Open your browser to <a href=\"http://localhost:1234\">http://localhost:1234</a> to see the app in action</li>\n<li>As you follow along, you can also take a look at the solution branches:\n<ul>\n<li><a href=\"https://github.com/DevRocketCode/plagiarism-detection-service/compare/solution-1?expand=1\">Solution 1: Introduced OpenAI API</a></li>\n<li><a href=\"https://github.com/DevRocketCode/plagiarism-detection-service/compare/solution-2?expand=1\">Solution 2: Formatted OpenAI response in a more helpful way</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"understanding-the-project\" style=\"position:relative;\"><a href=\"#understanding-the-project\" aria-label=\"understanding the project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding the project</h3>\n<p>Take a look through the source code to get a sense of how the project is structured.</p>\n<ul>\n<li>Client:\n<ul>\n<li>All client-side code (React) is in the <code class=\"language-text\">client/src</code> directory.</li>\n<li>We'll be working exclusively in <code class=\"language-text\">client/src/App.tsx</code> for this tutorial.</li>\n</ul>\n</li>\n</ul>\n<p>The Front end is a basic React app that allows the user to enter text and submit it to the server for processing.</p>\n<ul>\n<li>Server:\n<ul>\n<li>All server-side code (Express) is in the <code class=\"language-text\">server/src</code> directory.</li>\n<li>We'll be working in both <code class=\"language-text\">server/src/app.ts</code> and <code class=\"language-text\">server/src/util.ts</code> for this tutorial.</li>\n</ul>\n</li>\n</ul>\n<p>The server then returns the response to the client, which will display it in a helpful way.</p>\n<h2 id=\"requesting-a-completion\" style=\"position:relative;\"><a href=\"#requesting-a-completion\" aria-label=\"requesting a completion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requesting a Completion</h2>\n<p>First, we'll need to build our completion request. Work inside <code class=\"language-text\">server/src/util.ts</code> for this section.</p>\n<h3 id=\"the-docs\" style=\"position:relative;\"><a href=\"#the-docs\" aria-label=\"the docs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Docs</h3>\n<p>Go to the <a href=\"https://platform.openai.com/docs/api-reference/completions/create\">OpenAI API Docs</a> and read the docs for the <code class=\"language-text\">Create Completion</code> endpoint.</p>\n<h3 id=\"the-config\" style=\"position:relative;\"><a href=\"#the-config\" aria-label=\"the config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Config</h3>\n<p>We'll copy the first portion of this code and add it to our module:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Configuration<span class=\"token punctuation\">,</span> OpenAIApi <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'openai'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  apiKey<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">OPENAI_API_KEY</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> openai <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OpenAIApi</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"the-request\" style=\"position:relative;\"><a href=\"#the-request\" aria-label=\"the request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Request</h3>\n<p>Next, we need to create and export the function that will allow us to call the API.</p>\n<p>Add the following function to <code class=\"language-text\">server/src/util.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> checkForPlagiarism <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>textBody<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// we build a prompt, not just passing the text directly.</span>\n  <span class=\"token keyword\">const</span> prompt <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Please check the following text for plagiarism. Here is the text: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>textBody<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\". Give detail on why you think this is plagiarized or not. If it is likely a quote, it should be categorized as \"Plagiarized\", but give the explanation that it is a quote.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> openai<span class=\"token punctuation\">.</span><span class=\"token function\">createCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// different models are better at some things than others</span>\n    <span class=\"token comment\">// for example, to moderate text, use text-moderation-stable</span>\n    model<span class=\"token operator\">:</span> <span class=\"token string\">\"text-davinci-003\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token comment\">// the composed prompt from above</span>\n    prompt<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// keeping this number low will allow you to conserve your API credits</span>\n    <span class=\"token comment\">// but we need to increase it to get a long enough description </span>\n    <span class=\"token comment\">// of the reason why something is categorized the way it is</span>\n    max_tokens<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// temperature is how random the text response is</span>\n    <span class=\"token comment\">// 0 is deterministic (consistent), 2 is very random</span>\n    <span class=\"token comment\">// defaults to 1</span>\n    temperature<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// we return the first choice's text</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>choices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"forwarding-the-response\" style=\"position:relative;\"><a href=\"#forwarding-the-response\" aria-label=\"forwarding the response permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Forwarding The Response</h3>\n<p>Now that we have our completion request, we need to forward the response to the client.  We'll do this in <code class=\"language-text\">server/src/app.ts</code>.</p>\n<p>First, we'll import our function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> checkForPlagiarism <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, we'll replace this line...</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">    <span class=\"token keyword\">const</span> verdict <span class=\"token operator\">=</span> <span class=\"token string\">'NOT YET IMPLEMENTED. This is where the response will be returned.'</span></code></pre></div>\n<p>...with this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">    <span class=\"token keyword\">const</span> verdict <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">checkForPlagiarism</span><span class=\"token punctuation\">(</span>textBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we are passing the text body to our function, and awaiting the response. This verdict gets passed back to the front end on the next line.</p>\n<h3 id=\"testing-it-out\" style=\"position:relative;\"><a href=\"#testing-it-out\" aria-label=\"testing it out permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing It Out</h3>\n<p>Now that we have our completion request, we need to test it out.  Go to <a href=\"http://localhost:1234\">http://localhost:1234</a>, enter the single word \"something\" and click \"Submit\".  You should see a response that looks something like this:</p>\n<blockquote>\n<p>This is not plagiarized because it is an incomplete sentence.</p>\n</blockquote>\n<p>Now let's try something from Edgar Allen Poe's \"The Raven\":</p>\n<blockquote>\n<p>Once upon a midnight dreary, while I pondered, weak and weary</p>\n</blockquote>\n<p>You should see a response that looks something like this:</p>\n<blockquote>\n<p>This is plagiarized because it is a quote from Edgar Allan Poe's poem 'The Raven'.</p>\n</blockquote>\n<p>It is already quite astonishing how accurate Chat's responses are, but we can do better.  Let's format the response in a more helpful way.</p>\n<h2 id=\"formatting-the-response\" style=\"position:relative;\"><a href=\"#formatting-the-response\" aria-label=\"formatting the response permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Formatting the Response</h2>\n<p>Inside the <code class=\"language-text\">checkForPlagiarism</code> function, we'll change our context for the prompt a bit. Let's change it so that we request valid json back, with two useful properties: <code class=\"language-text\">verdict</code> and <code class=\"language-text\">detail</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> prompt <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Please check the following text for plagiarism. Here is the text: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>textBody<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\". Give detail on why you think this is plagiarized or not. Respond with only valid json object in this format: { \"verdict\": \"Plagiarized\", \"detail\": \"This is plagiarized because...\" }. If it is likely a quote, \"verdict\" should come back as \"Plagiarized\". If it is likely unique, \"verdict\" should come back as \"Not plagiarized\".</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, if we test our App, we notice that the Verdict comes back as something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"verdict\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Plagiarized\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"detail\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This is plagiarized because it is a quote from Edgar Allan Poe's poem 'The Raven'.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is amazing! Chat is also able to consistently return responses in a json-valid format, something we can use in our application.  So let's update our React app:</p>\n<h2 id=\"updating-the-react-app\" style=\"position:relative;\"><a href=\"#updating-the-react-app\" aria-label=\"updating the react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating the React App</h2>\n<p>We'll be working inside <code class=\"language-text\">client/src/App.tsx</code> for this section.</p>\n<p>We'll need 2 more pieces of state, to hold our detail and whether or not to show our detail.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>detail<span class=\"token punctuation\">,</span> setDetail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showDetail<span class=\"token punctuation\">,</span> setShowDetail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we need to parse the JSON response and update the <code class=\"language-text\">output</code> state to only hold the verdict</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// wrap everything in a try/catch block because we are parsing json, and we're not 100% sure the response from ChatGPT will be valid json</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// set the output to the verdict</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>verdict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>verdict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// set the detail to the detail</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setDetail</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// just in case json doesn't parse correctly, we'll set the output to the raw response</span>\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, inside our \"Verdict\" div, we need to add a button to show the detail, and a way to hide it:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  detail <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowDetail</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Show Explanation</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, if we are currently showing the detail, display a div with the detail in it</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  showDetail <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Explanation</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>detail<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"testing-it-out-1\" style=\"position:relative;\"><a href=\"#testing-it-out-1\" aria-label=\"testing it out 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing It Out</h2>\n<p>Now, if we test our application as we did before, we should see a simple \"Plagiarized\" or \"Not Plagiarized\" in the verdict box, along with a details button that can toggle the further explanation.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>We've now built a plagiarism checker using ChatGPT and OpenAI's API.  This is a very simple example of what is possible with these tools.  You can use this as a starting point to build your own plagiarism checker, or you can use it as a starting point to build something else entirely.  The possibilities are endless!</p>","frontmatter":{"title":"Build a Plagiarism Detection Service","date":"May 09, 2023","description":"Using TypeScript and the ChatGPT API from OpenAI","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#081818","images":{"fallback":{"src":"/static/8edefee7fc1f2ca32512ee0e62f9c804/f7f5e/header.png","srcSet":"/static/8edefee7fc1f2ca32512ee0e62f9c804/ce8ad/header.png 225w,\n/static/8edefee7fc1f2ca32512ee0e62f9c804/2db5a/header.png 450w,\n/static/8edefee7fc1f2ca32512ee0e62f9c804/f7f5e/header.png 900w,\n/static/8edefee7fc1f2ca32512ee0e62f9c804/d83da/header.png 1800w","sizes":"(min-width: 900px) 900px, 100vw"},"sources":[{"srcSet":"/static/8edefee7fc1f2ca32512ee0e62f9c804/71a10/header.webp 225w,\n/static/8edefee7fc1f2ca32512ee0e62f9c804/901f1/header.webp 450w,\n/static/8edefee7fc1f2ca32512ee0e62f9c804/4ffff/header.webp 900w,\n/static/8edefee7fc1f2ca32512ee0e62f9c804/66516/header.webp 1800w","type":"image/webp","sizes":"(min-width: 900px) 900px, 100vw"}]},"width":900,"height":600}}},"type":null,"youTubeVideo":null,"repository":null}},"previous":{"fields":{"slug":"/blog/2023/04/typescript-project-from-scratch/"},"frontmatter":{"title":"Build an Express server in TypeScript, from scratch"}},"next":{"fields":{"slug":"/blog/exclusive/ultimate-terminal-cheatsheet/"},"frontmatter":{"title":"The Ultimate Terminal Cheatsheet - Your Key to Command Line Productivity"}}},"pageContext":{"id":"8ccac348-db98-5e6c-98ca-366638494533","previousPostId":"29746079-0ade-515d-8b4d-3d2a5a8cbbca","nextPostId":"1ca8932c-e563-5613-8a46-0f3cc6f2a23d"}},"staticQueryHashes":["2841359383","2944715102"],"slicesMap":{}}