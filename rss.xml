<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 01 Apr 2023 06:41:46 GMT</lastBuildDate><item><title><![CDATA[Why RESTful APIs are Holding You Back]]></title><description><![CDATA[RESTful APIs have been the standard for building APIs for a long time, but they have their limitations. As APIs become more complex andâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/blog/exclusive/why-restful-apis-holding-back-graphql/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/blog/exclusive/why-restful-apis-holding-back-graphql/</guid><content:encoded>&lt;p&gt;&lt;strong&gt;RESTful APIs have been the standard for building APIs for a long time&lt;/strong&gt;, but they have their limitations. As APIs become more complex and dynamic, RESTful APIs can become difficult to maintain and optimize. That&apos;s where GraphQL comes in.&lt;/p&gt;
&lt;p&gt;GraphQL is a query language for APIs that was developed by Facebook. It provides a more efficient and powerful alternative to traditional RESTful APIs. Let&apos;s take a closer look at some of the flaws of RESTful APIs and how GraphQL addresses them.&lt;/p&gt;
&lt;h2&gt;1. Overfetching and Underfetching&lt;/h2&gt;
&lt;p&gt;One of the biggest flaws of RESTful APIs is overfetching and underfetching.&lt;/p&gt;
&lt;p&gt;Let&apos;s say you have a RESTful API for a pizza delivery service. You want to retrieve a list of pizzas with their toppings, but with RESTful APIs you have to make two separate requests to get this information.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# RESTful API example&lt;/span&gt;
GET /pizzas
&lt;span class=&quot;token comment&quot;&gt;# Returns an array of pizza objects with their ids&lt;/span&gt;

GET /pizzas/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/toppings
&lt;span class=&quot;token comment&quot;&gt;# Returns an array of toppings for the specified pizza id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can result in overfetching (getting more data than you need) and underfetching (having to make multiple requests to get all the data you need).&lt;/p&gt;
&lt;p&gt;Now, let&apos;s compare this to a GraphQL query:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# GraphQL example&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token object&quot;&gt;pizzas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;toppings&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This single query retrieves all the data you need in one go. No more overfetching or underfetching!&lt;/p&gt;
&lt;h2&gt;2. Multiple Endpoints&lt;/h2&gt;
&lt;p&gt;Another flaw of RESTful APIs is that you often have to make multiple requests to different endpoints to get all the data you need. This can make your API more complex and difficult to maintain.&lt;/p&gt;
&lt;p&gt;With GraphQL, you can get all the data you need in a single request, regardless of where the data is stored. This simplifies your API and makes it easier to maintain.&lt;/p&gt;
&lt;p&gt;Suppose we have the following RESTful endpoints:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;GET /pizzas - to get all the available pizzas
GET /toppings - to get all the available toppings
GET /orders - to get all the pizza orders&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In GraphQL, we can create a single query that retrieves data from all three endpoints:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token object&quot;&gt;pizzas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;price&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token object&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token object&quot;&gt;orders&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;customerName&lt;/span&gt;
    &lt;span class=&quot;token object&quot;&gt;pizza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;id&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token object&quot;&gt;toppings&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;id&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3. Versioning&lt;/h2&gt;
&lt;p&gt;Another issue with RESTful APIs is versioning. When you make changes to your API, you often have to create a new version, which can result in a lot of redundant code and extra work.&lt;/p&gt;
&lt;p&gt;With GraphQL, you can add new fields to your schema without breaking existing queries. This means you can evolve your API over time without the need for versioning.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# GraphQL schema example&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;toppings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;pizzas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# New field added to the schema&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;toppings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;isVegetarian&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; // &lt;span class=&quot;token property&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, we added a new &lt;code class=&quot;language-text&quot;&gt;calories&lt;/code&gt; field to the &lt;code class=&quot;language-text&quot;&gt;Pizza&lt;/code&gt; type without breaking any existing queries. This makes it easier to evolve your API over time, without the need for versioning.&lt;/p&gt;
&lt;h2&gt;4. Documentation&lt;/h2&gt;
&lt;p&gt;Finally, documentation can be a challenge with RESTful APIs. With so many endpoints and resources, it can be difficult to keep track of everything.&lt;/p&gt;
&lt;p&gt;With GraphQL, your schema serves as a self-documenting contract between your API and your clients. You can see from the below schema that it already describes what the different types and fields represent for your pizza ordering system:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;graphql&quot;&gt;&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;customerName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;pizza&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;toppings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;pizzas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;toppings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Topping&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;token attr-name&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With RESTful APIs, you would have to update your documentation manually to reflect this change. But in this schema, we define three types (&lt;code class=&quot;language-text&quot;&gt;Pizza&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Topping&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;Order&lt;/code&gt;) and three queries (&lt;code class=&quot;language-text&quot;&gt;pizzas&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;toppings&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;orders&lt;/code&gt;). The types define the structure of the data returned by the API, and the queries define the ways in which the data can be retrieved.&lt;/p&gt;
&lt;p&gt;By defining a schema like this, we have provided a single source of truth for the API, which makes it easy for developers to understand how to use the API and what data they can expect to receive. Additionally, tools like GraphiQL can use the schema to provide a rich development environment with auto-complete, validation, and documentation.&lt;/p&gt;
&lt;p&gt;In conclusion, while RESTful APIs have been the standard for a long time, they have their flaws. GraphQL provides a more efficient and powerful alternative, allowing you to build APIs that are faster, more flexible, and easier to maintain. If you haven&apos;t already, it&apos;s time to switch to GraphQL!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[7 Common Mistakes Junior Developers Make]]></title><description><![CDATA[As a junior developer, you're bound to make mistakes. But don't worry, we've got your back. Here are 7 common mistakes that juniorâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/blog/exclusive/7-common-mistakes-junior-developers/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/blog/exclusive/7-common-mistakes-junior-developers/</guid><content:encoded>&lt;p&gt;As a junior developer, you&apos;re bound to make mistakes. But don&apos;t worry, we&apos;ve got your back. Here are 7 common mistakes that junior developers make and how to avoid them.&lt;/p&gt;
&lt;h2&gt;1. Not Using Version Control&lt;/h2&gt;
&lt;p&gt;Version control is your best friend. It helps you keep track of your code changes, collaborate with your team, and revert to previous versions if needed. Don&apos;t be the developer who doesn&apos;t use version control.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Initialize a Git repository in your project folder&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init

&lt;span class=&quot;token comment&quot;&gt;# Add all files to the staging area&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Commit your changes with a meaningful message&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Initial commit&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2. Ignoring Error Messages&lt;/h2&gt;
&lt;p&gt;Error messages may seem like the bane of your existence, but they&apos;re actually your friend. They tell you what&apos;s wrong with your code and how to fix it. Don&apos;t ignore them!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Don&apos;t ignore error messages!&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myVar &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;myVar is undefined!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3. Overcomplicating Code&lt;/h2&gt;
&lt;p&gt;Simplicity is key. Don&apos;t try to reinvent the wheel or write overly complex code. Keep it simple and clean.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Instead of this...&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; myArray&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...do this&lt;/span&gt;
myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4. Not Testing Code&lt;/h2&gt;
&lt;p&gt;Testing your code is essential. It helps you catch bugs early and ensures that your code works as expected. Don&apos;t skip testing!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Use a testing framework like Jest&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addition works correctly&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5. Hardcoding Values&lt;/h2&gt;
&lt;p&gt;Hardcoding values may work in the short term, but it&apos;s not scalable or maintainable. Use variables or constants instead.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Instead of this...&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculateTax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...do this&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TAX_RATE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculateTax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; price &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;TAX_RATE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6. Not Using Comments&lt;/h2&gt;
&lt;p&gt;Comments are your friend. They help you and your team understand what your code does and why. Don&apos;t be afraid to use them!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Use comments to explain what your code does&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calculateArea&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Calculate the area by multiplying width and height&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; area &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; area&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7. Copying and Pasting Code&lt;/h2&gt;
&lt;p&gt;Copying and pasting code may seem like a quick solution, but it&apos;s not a good habit to have. It can lead to errors and make your code harder to maintain. Write your own code!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Instead of copying and pasting code...&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...write your own code&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;total&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; total &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&apos;s it for today! Avoid these 7 common mistakes and you will be well on your way to becoming a great developer. Stay tuned for more tips and tricks to level up your skills!&lt;/p&gt;
&lt;p&gt;We hope you found this lesson helpful and engaging. Remember, as a junior developer, you are bound to make mistakes, but it&apos;s important to learn from them and keep improving. Keep coding, keep learning, and keep growing!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Ultimate Terminal Cheatsheet - Your Key to Command Line Productivity]]></title><description><![CDATA[Welcome to the Ultimate Terminal Cheatsheet! We know the command line can be intimidating, like trying to navigate a maze blindfolded. Butâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/blog/exclusive/ultimate-terminal-cheatsheet/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/blog/exclusive/ultimate-terminal-cheatsheet/</guid><content:encoded>&lt;p&gt;Welcome to the Ultimate Terminal Cheatsheet! We know the command line can be intimidating, like trying to navigate a maze blindfolded. But fear not, for this cheatsheet will be your trusty guide, like a GPS for your terminal. From manipulating files to networking to version control, we&apos;ve got you covered. Let&apos;s power up our keyboards and get ready to conquer the command line!&lt;/p&gt;
&lt;h2&gt;Get the markdown file for this cheatsheet&lt;/h2&gt;
&lt;button class=&quot;button button-info button-medium hover-grow&quot;&gt;
&lt;a href=&quot;https://gist.github.com/wallacepreston/180194b3799bc936e3a035449b8c06ac&quot;&gt;
  Get the markdown
&lt;/a&gt;
&lt;/button&gt; ðŸ‘ˆ Click for the Markdown
&lt;h2&gt;Basic Terminal Commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Command line
&lt;ul&gt;
&lt;li&gt;See where I am &lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;list files &lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;list hidden files &lt;code class=&quot;language-text&quot;&gt;ls -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;change directory &lt;code class=&quot;language-text&quot;&gt;cd &amp;lt;directory-name&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open whole directory in VS Code &lt;code class=&quot;language-text&quot;&gt;code .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;shorthand for current and previous folder
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ls .&lt;/code&gt; lists current folder&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ls ..&lt;/code&gt; lists previous folder&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd ..&lt;/code&gt; moves up a folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;home vs root
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;~&lt;/code&gt; is short for home&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd ~&lt;/code&gt; brings you home&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt; is short for root&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd /&lt;/code&gt; brings to you root&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;absolute vs relative paths
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Absolute&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;touch /folder-name/file-name.txt&lt;/code&gt; goes to the root folder, into &lt;code class=&quot;language-text&quot;&gt;folder-name&lt;/code&gt;, makes a file inside of that folder&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;touch ./folder-name/file-name.txt&lt;/code&gt; goes into &lt;code class=&quot;language-text&quot;&gt;folder-name&lt;/code&gt; from current level, makes a file inside of that folder&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;touch ~/folder-name/file-name.txt&lt;/code&gt; goes into your home directory (usually looks like &lt;code class=&quot;language-text&quot;&gt;/home/username&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files
&lt;ul&gt;
&lt;li&gt;create files &lt;code class=&quot;language-text&quot;&gt;touch file-name.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remove a file &lt;code class=&quot;language-text&quot;&gt;rm file-name.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rename a file &lt;code class=&quot;language-text&quot;&gt;mv file-name.txt new-file-name.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;move a file &lt;code class=&quot;language-text&quot;&gt;mv this.txt target-folder/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Folders
&lt;ul&gt;
&lt;li&gt;create folders &lt;code class=&quot;language-text&quot;&gt;mkdir folder-name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remove a folder &lt;code class=&quot;language-text&quot;&gt;rm folder-name -R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rename a folder &lt;code class=&quot;language-text&quot;&gt;mv folder-name new-folder-name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;move a folder &lt;code class=&quot;language-text&quot;&gt;mv folder-name ../../target-folder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;grep&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;search recursively for a pattern in a directory: &lt;code class=&quot;language-text&quot;&gt;grep -r &amp;lt;pattern&gt; &amp;lt;directory&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;search for a pattern in a file: &lt;code class=&quot;language-text&quot;&gt;grep &amp;lt;pattern&gt; &amp;lt;file&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;search for a pattern in multiple files: &lt;code class=&quot;language-text&quot;&gt;grep &amp;lt;pattern&gt; &amp;lt;file1&gt; &amp;lt;file2&gt; &amp;lt;file3&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ignore case when searching: &lt;code class=&quot;language-text&quot;&gt;grep -i &amp;lt;pattern&gt; &amp;lt;file&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;count the number of occurrences of a pattern: &lt;code class=&quot;language-text&quot;&gt;grep -c &amp;lt;pattern&gt; &amp;lt;file&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;print the line number for each match: &lt;code class=&quot;language-text&quot;&gt;grep -n &amp;lt;pattern&gt; &amp;lt;file&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;print the lines before or after the matching line: &lt;code class=&quot;language-text&quot;&gt;grep -A &amp;lt;num_lines&gt; &amp;lt;pattern&gt; &amp;lt;file&gt;&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;grep -B &amp;lt;num_lines&gt; &amp;lt;pattern&gt; &amp;lt;file&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;print the matching line and a few lines before and after it: &lt;code class=&quot;language-text&quot;&gt;grep -C &amp;lt;num_lines&gt; &amp;lt;pattern&gt; &amp;lt;file&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloning and remotes
&lt;ul&gt;
&lt;li&gt;Clone &lt;code class=&quot;language-text&quot;&gt;git clone &amp;lt;url&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check where cloning from and committing to &lt;code class=&quot;language-text&quot;&gt;git remote -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a remote repository  &lt;code class=&quot;language-text&quot;&gt;git remote add &amp;lt;remote-name&gt; https://remote-url/repo-name.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the origin &lt;code class=&quot;language-text&quot;&gt;git remote set-url origin &amp;lt;new-git-repo-url&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Committing
&lt;ul&gt;
&lt;li&gt;See status of staging area etc &lt;code class=&quot;language-text&quot;&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add all files in the repo to staging area &lt;code class=&quot;language-text&quot;&gt;git add -A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add just one file to the staging area &lt;code class=&quot;language-text&quot;&gt;git add &amp;lt;filename&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit &lt;code class=&quot;language-text&quot;&gt;git commit -m &quot;my-message&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push &lt;code class=&quot;language-text&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Branching
&lt;ul&gt;
&lt;li&gt;Check out to a new branch &lt;code class=&quot;language-text&quot;&gt;git checkout -b &amp;lt;branchname&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check out to an existing branch &lt;code class=&quot;language-text&quot;&gt;git checkout &amp;lt;branchname&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete a branch (cannot be the branch you&apos;re on!) &lt;code class=&quot;language-text&quot;&gt;git branch -D &amp;lt;branchname&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge another branch into current branch
&lt;ol&gt;
&lt;li&gt;Move to the branch you want to merge FROM &lt;code class=&quot;language-text&quot;&gt;git checkout dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pull down most recent remote version &lt;code class=&quot;language-text&quot;&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move to the branch you want to merge TO &lt;code class=&quot;language-text&quot;&gt;git checkout feature-branch-#25&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge the FROM branch (&lt;code class=&quot;language-text&quot;&gt;dev&lt;/code&gt; in this case) into the current branch &lt;code class=&quot;language-text&quot;&gt;git merge dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logs
&lt;ul&gt;
&lt;li&gt;See log of activity (commits) &lt;code class=&quot;language-text&quot;&gt;git log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See log with limited info (easier to read) &lt;code class=&quot;language-text&quot;&gt;git log --oneline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configs
&lt;ul&gt;
&lt;li&gt;Change git email locally: &lt;code class=&quot;language-text&quot;&gt;git config user.name &quot;Marley McTesterson&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change git email locally: &lt;code class=&quot;language-text&quot;&gt;git config user.email example@email.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See git repo config settings (i.e. email username etc): &lt;code class=&quot;language-text&quot;&gt;git config --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Diffs
&lt;ul&gt;
&lt;li&gt;See what is changed currently compared to the most recent commit &lt;code class=&quot;language-text&quot;&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See what has changed in the current working tree vs a specific branch &lt;code class=&quot;language-text&quot;&gt;git diff &amp;lt;branch-name&gt; --&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Show the difference between two branches: &lt;code class=&quot;language-text&quot;&gt;git diff &amp;lt;branch1&gt; &amp;lt;branch2&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Removing/rebasing changes - Intermediate to Advanced
&lt;ul&gt;
&lt;li&gt;Auto-stash changes before switching branches: &lt;code class=&quot;language-text&quot;&gt;git checkout &amp;lt;branch&gt; --autostash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove uncommitted changes (but save them for later, just in case) &lt;code class=&quot;language-text&quot;&gt;git stash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove last commit &lt;code class=&quot;language-text&quot;&gt;git reset --hard HEAD^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Squash the last 3 commits into one single commit &lt;code class=&quot;language-text&quot;&gt;git rebase -i HEAD~3&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Then in the editor, for any commits you want to keep leave &lt;code class=&quot;language-text&quot;&gt;pick&lt;/code&gt;. For anything you want to &quot;squash&quot; and not include that as a commit, change &lt;code class=&quot;language-text&quot;&gt;pick&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;squash&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Squash everything after &lt;SHA1&gt; &lt;code class=&quot;language-text&quot;&gt;git rebase -i e25340b&lt;/code&gt; where e25340b is the SHA1
&lt;ul&gt;
&lt;li&gt;Repeat next step from above to pick/squash specific  commits.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ports/processes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Show what is running on a port &lt;code class=&quot;language-text&quot;&gt;lsof -i:&amp;lt;port-number&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Kill a process &lt;code class=&quot;language-text&quot;&gt;kill &amp;lt;process-id&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Example of above two steps&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;lsof&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i:3000&lt;/span&gt;
COMMAND   PID    &lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;   FD   TYPE            DEVICE SIZE/OFF NODE NAME
&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;78070&lt;/span&gt; myuser   24u  IPv6 0xdc9d8g07c355e5f      0t0  TCP *:hbci &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LISTEN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

$ &lt;span class=&quot;token function&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;78070&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Show list of all node processes &lt;code class=&quot;language-text&quot;&gt;ps -ef | grep node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Kill all node processes &lt;code class=&quot;language-text&quot;&gt;pkill -f node&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;cURL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Methods
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt; request: &lt;code class=&quot;language-text&quot;&gt;curl https://www.google.com/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt; request: &lt;code class=&quot;language-text&quot;&gt;curl http://localhost:3000/myroute -H &quot;Content-Type: application/json&quot; -X POST -d &apos;{&quot;key1&quot;: &quot;val1&quot;, &quot;key2&quot;: &quot;val2&quot;}&apos;&lt;/code&gt; (&lt;code class=&quot;language-text&quot;&gt;-H&lt;/code&gt; is a header, in this case setting our content type as json. &lt;code class=&quot;language-text&quot;&gt;-X&lt;/code&gt; is setting the method, post in this case. &lt;code class=&quot;language-text&quot;&gt;-d&lt;/code&gt; is the request body in JSON format.)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;PATCH&lt;/code&gt; request: &lt;code class=&quot;language-text&quot;&gt;curl http://localhost:3000/myroute -X PATCH -H &apos;Content-Type: application/json&apos; -d &apos;{&quot;key1&quot;: &quot;val1&quot;, &quot;key2&quot;: &quot;val2&quot;}&apos;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DELETE&lt;/code&gt; request: &lt;code class=&quot;language-text&quot;&gt;curl http://localhost:3000/myrouote -X DELETE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Setting Authorization header: &lt;code class=&quot;language-text&quot;&gt;curl http://localhost:3000/myroute -H &apos;Authorization: Bearer &amp;lt;myreallylongtoken&gt;&apos;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Basic Auth: Authenticate with a username and password while accessing a URL: &lt;code class=&quot;language-text&quot;&gt;curl -u &amp;lt;username&gt;:&amp;lt;password&gt; &amp;lt;url&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Send a POST request with data from a file: &lt;code class=&quot;language-text&quot;&gt;curl -X POST -d @&amp;lt;filename&gt; &amp;lt;url&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fetch only the headers of a URL: &lt;code class=&quot;language-text&quot;&gt;curl -I &amp;lt;url&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download the contents of a URL and save it to a file: &lt;code class=&quot;language-text&quot;&gt;curl -o &amp;lt;output_file&gt; &amp;lt;url&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;VIM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Insert mode: &lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Normal mode: &lt;code class=&quot;language-text&quot;&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write changes to file: &lt;code class=&quot;language-text&quot;&gt;:w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Quit VIM: &lt;code class=&quot;language-text&quot;&gt;:q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Save changes and quit VIM: &lt;code class=&quot;language-text&quot;&gt;:wq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Undo last change: &lt;code class=&quot;language-text&quot;&gt;u&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Redo last undone change: &lt;code class=&quot;language-text&quot;&gt;Ctrl + r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Serverless Framework&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a new serverless project: &lt;code class=&quot;language-text&quot;&gt;serverless create --template &amp;lt;template-name&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Deploy a serverless project: &lt;code class=&quot;language-text&quot;&gt;serverless deploy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove a deployed serverless project: &lt;code class=&quot;language-text&quot;&gt;serverless remove&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Docker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;List all running containers: &lt;code class=&quot;language-text&quot;&gt;docker ps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stop a container: &lt;code class=&quot;language-text&quot;&gt;docker stop &amp;lt;container-id&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove a container: &lt;code class=&quot;language-text&quot;&gt;docker rm &amp;lt;container-id&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List all available images: &lt;code class=&quot;language-text&quot;&gt;docker images&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove an image: &lt;code class=&quot;language-text&quot;&gt;docker rmi &amp;lt;image-id&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;macOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Show hidden files in Finder: &lt;code class=&quot;language-text&quot;&gt;Shift + Command + .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open a file or folder in Finder from Terminal: &lt;code class=&quot;language-text&quot;&gt;open &amp;lt;file/folder&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Show all running processes: &lt;code class=&quot;language-text&quot;&gt;ps aux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Kill a process: &lt;code class=&quot;language-text&quot;&gt;kill &amp;lt;pid&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the macOS Dock: &lt;code class=&quot;language-text&quot;&gt;killall Dock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Update package manager: &lt;code class=&quot;language-text&quot;&gt;sudo apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install a package: &lt;code class=&quot;language-text&quot;&gt;sudo apt-get install &amp;lt;package-name&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove a package: &lt;code class=&quot;language-text&quot;&gt;sudo apt-get remove &amp;lt;package-name&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Show all running processes: &lt;code class=&quot;language-text&quot;&gt;ps aux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Kill a process: &lt;code class=&quot;language-text&quot;&gt;kill &amp;lt;pid&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Harnessing the Power of TypeScript Interfaces - A Guide for Developers]]></title><description><![CDATA[As a TypeScript developer, I have come to appreciate the power of interfaces in ensuring the type safety of my code. Interfaces allow us toâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/blog/2023/02/typescript-interfaces/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/blog/2023/02/typescript-interfaces/</guid><pubDate>Fri, 10 Mar 2023 20:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As a TypeScript developer, I have come to appreciate the power of interfaces in ensuring the type safety of my code. Interfaces allow us to define the shape of an object and enforce that shape in our code.&lt;/p&gt;
&lt;p&gt;Here&apos;s a simple example of how you can use interfaces in TypeScript:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; user&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; User &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Output: { name: &apos;John Doe&apos;, age: 30 }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, we define an interface &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; with two properties, &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;age&lt;/code&gt;, both of which are required. By using the interface &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; as the type for the &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt; constant, we ensure that the object assigned to &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt; adheres to the shape defined by the &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;Interfaces are an incredibly useful tool for keeping your code clean, organized, and type-safe. If you haven&apos;t already, give them a try in your next TypeScript project! ðŸš€&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Deploy Your First AWS Lambda Function with GitHub Actions]]></title><description><![CDATA[Writing your first AWS Lambda function is a great way to get started with serverless computing. However, deploying your function can be aâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/blog/2023/02/aws-lambda-github-actions/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/blog/2023/02/aws-lambda-github-actions/</guid><pubDate>Sun, 26 Feb 2023 20:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Writing your first AWS Lambda function is a great way to get started with serverless computing. However, deploying your function can be a bit tricky. In this article, we&apos;ll walk through the process of deploying your first Lambda function using GitHub Actions.&lt;/p&gt;
&lt;h2&gt;Step 1: Create a New Lambda Function&lt;/h2&gt;
&lt;p&gt;To get started, log in to your AWS console and navigate to the Lambda service. From there, you can create a new function by clicking the &quot;Create function&quot; button. Select the &quot;Author from scratch&quot; option and provide a name for your function.&lt;/p&gt;
&lt;p&gt;Next, you&apos;ll need to choose a runtime for your function. In this example, we&apos;ll use Node.js. Once you&apos;ve selected your runtime, click the &quot;Create function&quot; button to create your new Lambda function.&lt;/p&gt;
&lt;h2&gt;Step 2: Write Your Function Code&lt;/h2&gt;
&lt;p&gt;Now that you&apos;ve created your Lambda function, you can start writing your function code. In this example, we&apos;ll write a simple function that takes two numbers as input and returns their sum. Here&apos;s the code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; num2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save this code as a file called &quot;index.js&quot;.&lt;/p&gt;
&lt;h2&gt;Step 3: Create a Deployment Package&lt;/h2&gt;
&lt;p&gt;To deploy your Lambda function, you&apos;ll need to create a deployment package that includes your function code and any dependencies it has. To do this, create a new folder and copy your &quot;index.js&quot; file into it. Then, run the following command to install the required dependencies:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; aws-sdk&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, create a ZIP archive of the entire folder.&lt;/p&gt;
&lt;h2&gt;Step 4: Create a GitHub Repository&lt;/h2&gt;
&lt;p&gt;Next, you&apos;ll need to create a new GitHub repository to store your Lambda function code. Once you&apos;ve created your repository, clone it to your local machine.&lt;/p&gt;
&lt;h2&gt;Step 5: Create a GitHub Actions Workflow&lt;/h2&gt;
&lt;p&gt;To deploy your Lambda function using GitHub Actions, you&apos;ll need to create a new workflow file. Create a new file in your repository called &quot;.github/workflows/deploy.yml&quot; and add the following code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy Lambda Function

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout code
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Configure AWS credentials
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; aws&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;actions/configure&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;aws&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;credentials@v1
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;aws-access-key-id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.AWS_ACCESS_KEY_ID &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;aws-secret-access-key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.AWS_SECRET_ACCESS_KEY &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;aws-region&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; us&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;east&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy function
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          aws lambda update-function-code \
            --function-name my-function \
            --zip-file fileb://deployment-package.zip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This workflow will trigger a deployment every time a push is made to the main branch of your repository. It will first check out your code, then configure your AWS credentials using GitHub Secrets, and finally deploy your function by uploading your deployment package to your Lambda function.&lt;/p&gt;
&lt;h2&gt;Step 6: Add GitHub Secrets&lt;/h2&gt;
&lt;p&gt;To securely store your AWS credentials, you&apos;ll need to add them as secrets in your GitHub repository. Navigate to your repository settings, click on &quot;Secrets&quot;, and then click the &quot;New repository secret&quot; button. Add two secrets: &quot;AWS_ACCESS_KEY_ID&quot; and &quot;AWS_SECRET_ACCESS_KEY&quot;, and provide their respective values.&lt;/p&gt;
&lt;h2&gt;Step 7: Commit and Push Your Changes&lt;/h2&gt;
&lt;p&gt;Now that you&apos;ve written your function code, created a deployment package, and set up your GitHub Actions workflow, it&apos;s time to commit and push your changes to your repository. Once your changes are pushed, GitHub Actions will automatically trigger a deployment of your Lambda function.&lt;/p&gt;
&lt;p&gt;Congrats! You&apos;ve successfully deployed your first Lambda function using GitHub Actions!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TypeScript - Unleashing the Power of JavaScript]]></title><description><![CDATA[TypeScript is a powerful superset of JavaScript that provides optional static typing, class-based object-oriented programming, and otherâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/blog/2023/01/typescript-unleash/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/blog/2023/01/typescript-unleash/</guid><pubDate>Thu, 16 Feb 2023 20:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TypeScript is a powerful superset of JavaScript that provides optional static typing, class-based object-oriented programming, and other features that can help developers write more maintainable and scalable code. By using TypeScript, developers can catch errors at compile time rather than at runtime, which can lead to fewer bugs and easier debugging. Additionally, TypeScript&apos;s enhanced typing system can help make code more self-documenting and improve developer productivity. Overall, TypeScript is a great choice for any project that is looking for a more robust and scalable codebase.&lt;/p&gt;
&lt;p&gt;Here is a simple example of a TypeScript class that represents a point in a two-dimensional coordinate system:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;distanceFromOrigin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; point &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;distanceFromOrigin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Output: 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, we have a &lt;code class=&quot;language-text&quot;&gt;Point&lt;/code&gt; class with two properties &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;y&lt;/code&gt; which are both of type number. The class also has a constructor that takes two parameters &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;y&lt;/code&gt; of type number and assigns them to the corresponding properties. The class also has a method &lt;code class=&quot;language-text&quot;&gt;distanceFromOrigin&lt;/code&gt; which calculates and returns the distance of the point from the origin.&lt;/p&gt;
&lt;p&gt;The use of TypeScript&apos;s type system in this example allows for better code readability, and catch potential bugs like passing a string instead of number, in early stages of development.&lt;/p&gt;</content:encoded></item></channel></rss>